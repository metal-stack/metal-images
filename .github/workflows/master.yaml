name: Latest Stable Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  GCS_BUCKET: images.metal-pod.io
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  debian_ubuntu:
    name: Build Debian and Ubuntu based OS images
    runs-on: self-hosted

    strategy:
      matrix:
        os:
        - name: debian
          version: 12
        - name: ubuntu
          version: 24.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: metal-stack
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Go 1.25
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'
        cache: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Lint
      uses: golangci/golangci-lint-action@v8
      with:
        args: --build-tags integration --timeout=3m

    - name: build install
      run: make

    - name: Prepare build environment
      shell: bash
      run: ./prepare.sh ${{ matrix.os.name }}

    - name: Build docker image for workers
      uses: docker/bake-action@v6
      with:
        files: ./docker-bake.hcl
        set: |
          ${{ matrix.os.name }}.args.SEMVER_MAJOR_MINOR=${{ matrix.os.version }}
          ${{ matrix.os.name }}.args.SEMVER_PATCH=-stable
        targets: ${{ matrix.os.name }}

    - name: Test and export docker image for workers
      run: |
        make CIS_VERSION="v4.1-4" OS_NAME="${{ matrix.os.name }}" SEMVER_PATCH="-stable" SEMVER_MAJOR_MINOR="${{ matrix.os.version }}" ${{ matrix.os.name }}

    - name: Build docker image for firewalls and export tarball
      run: |
        make OS_NAME="firewall" SEMVER_PATCH="-stable" SEMVER_MAJOR_MINOR="${{ matrix.os.version }}" firewall
      if: ${{ matrix.os.name == 'ubuntu' }}

    - name: Prepare build environment
      shell: bash
      run: ./prepare.sh debian-nvidia
      if: ${{ matrix.os.name == 'debian' }}

    - name: Build docker image for debian-nvidia
      uses: docker/bake-action@v6
      with:
        files: ./docker-bake.hcl
        set: |
          debian-nvidia.args.SEMVER_MAJOR_MINOR=${{ matrix.os.version }}
          debian-nvidia.args.SEMVER_PATCH=-stable
        targets: debian-nvidia
      if: ${{ matrix.os.name == 'debian' }}

    - name: Test and export docker image for debian-nvidia based workers
      run: |
        make OS_NAME="debian-nvidia" SEMVER_PATCH="-stable" SEMVER_MAJOR_MINOR="${{ matrix.os.version }}" nvidia
      if: ${{ matrix.os.name == 'debian' }}

    - name: Upload image tarballs to GCS
      run: cd images && gsutil -m -h "Cache-Control:no-store" cp -r . gs://$GCS_BUCKET/metal-os

  almalinux:
    name: Build Almalinux based OS image
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: metal-stack
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Go 1.25
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'
        cache: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: build install
      run: make
    - name: Prepare build environment
      shell: bash
      run: ./prepare.sh almalinux

    - name: Build image
      uses: docker/bake-action@v6
      with:
        files: ./docker-bake.hcl
        set: |
          almalinux.args.SEMVER_MAJOR_MINOR=9
          almalinux.args.SEMVER_PATCH="-stable"
        targets: almalinux

    - name: Test and export image for almalinux based workers
      run: |
        make OS_NAME="almalinux" SEMVER_PATCH="-stable" SEMVER_MAJOR_MINOR="9" almalinux

    - name: Upload image tarballs to GCS
      run: cd images && gsutil -m -h "Cache-Control:no-store" cp -r . gs://$GCS_BUCKET/metal-os
